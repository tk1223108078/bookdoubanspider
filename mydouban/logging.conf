# 定义logger模块, root是父类，其他的为自己定义
[loggers]  
keys=root,infoLogger,errorLogger  
  
# 定义handler
[handlers]  
keys=infoHandler,errorHandler  

# 定义格式化输出
[formatters]  
keys=infoFmt,errorFmt  

#
# logger
#  
# 实现上面定义的logger模块，必需是[logger_xxx]格式
# level		级别 DEBUG、INFO、WARNING、ERROR、CRITICAL
# handlers	处理类，可以有多个用逗号分开
# qualname	logger名称，应用程序通过logging.getlogger获取。对于不能获取的名称，则记录到root模块
# propagate 是否继承父类的log信息，0否 1是
[logger_root]  
level=INFO  
handlers=errorHandler  
  
[logger_infoLogger]  
level=INFO  
handlers=infoHandler  
qualname=infoLogger  
propagate=0  
  
[logger_errorLogger]  
level=ERROR
handlers=errorHandler
qualname=errorLogger
propagate=0

#
# handler
#
# class	handler类名
# level	日志级别
# formatter	格式
# args	handler初始化参数
[handler_infoHandler]
class=infoHandler
level=INFO
formatter=infoFmt
args=(sys.stdout)

[handler_errorHandler]
class=errorHandler
level=ERROR
formatter=errorFmt
args=(sys.stdout)
  
#--------------------------------------------------
# 日志格式
#--------------------------------------------------
# %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745
# %(filename)s      文件名，不含目录
# %(pathname)s      目录名，完整路径
# %(funcName)s      函数名
# %(levelname)s     级别名
# %(lineno)d        行号
# %(module)s        模块名
# %(message)s       消息体
# %(name)s          日志模块名
# %(process)d       进程id
# %(processName)s   进程名
# %(thread)d        线程id
# %(threadName)s    线程名
[formatter_infoFmt]  
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s  
datefmt=  
class=logging.Formatter

[formatter_errorFmt]  
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s  
datefmt=  
class=logging.Formatter